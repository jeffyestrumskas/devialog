# devialog config file
# devialog 0.9.0
#
# devialog is primarily for anomaly-based log management, It will be less likely for the user (you) to want to report on known syslog events.  However, it is still quite possible to do so.  Simply edit the file you have defined below in the SignatureFile directive.  The same "actions" that apply to anomalies apply to expected syslog events, for the most part.

# Attention:  It is VERY important to read this file in its entirety.  Don't worry, there aren't too many options to configure.

# Global directives are defined here, can be overridden by local directives.
[global]
	MailServer = localhost

# A Regular Expression to match most syslog formats
	SyslogRegEx = ^(\w{3}\s+\d+\s\d+:\d+:\d+)\s(\S+)\s(\S+\[\d+\]\:|\w+\:)\s+(.*)$

# This tries to catch the syslog formats the prior does not
	SyslogRegExBackup = ^(\w{3}\s+\d+\s\d+:\d+:\d+)\s(\S+)\s(.*)$

# Local directives, unique identifiers.  Use a unique identifier for each logfile to be examined
[messages]

# Possible log types: syslog, apache, windows
	LogType = syslog

# Location of file to be read
	LogFile = /var/log/messages

# Location of devialog signature file
	SignatureFile = signatures.pl

# Location of file to output anomalies (recommended to keep default)
	AnomalyOutfile = /var/log/anomalies

# Possible actions for an anomaly: mail, print, external, outfile, 
#	mail        Sends log anomalies to address configured above
#	print       Prints single log line to standard out
#	external    Executes external command when anomaly is received.
#             For example, external=</usr/bin/playsound.sh> can be a
#             shell script set to play a particular sound
# 
# Note: When using multiple actions, seperate with a comma: AnomalyAction = outfile, mail
	AnomalyAction = outfile, mail

# Recipient(s) of emails containing log anomalies.  Seperate multiple addresses with a comma
# Dependency: AnomalyAction must contain "mail"
	AnomalyRcpts = devialog@localhost

# Sending address of all email sent
	MailFrom = devialog@localhost

# Subject header for alerts
# Alerts sent via email will appear with the following by default:
#    devialog@<host>: <syslog message after the proccess>
#
# It is possible to utilize variables in the message subject.
#	 *H = Host in which anomaly occurred 
#  *M = Entire syslog message (excludes anything prior to process and process id)
#  *P = Process name
	MessageSubject = [devialog] *H: *M

# Subject header for queued alerts
# Alerts sent via email when queueing is enabled will appear with the following by default
# 	devialog@: <n> messages from <hosts>
#
# Message subject when queueing is enabled AND there is more than one alert to be sent.
# If there is less than one alert to be sent, MessageSubject is used
#
#	*H = Host(s) in which anomalies or events occured
#	*T = Total number of queued messages
	MessageSubjectForQueues = [devialog] *T messages from *H

# Character limit for the subject line of all emails devialog may send
	MessageSubjectLimit = 100

# Resolve IP addresses in the message subject for all emails sent
	MessageSubjectIPResolve = yes

# Include suggested signature in email body
	MessageSuggestSignature = yes

# Location to write suggested signatures for anomalies.  Comment line out to disable
	SuggestedSignatureLocation = suggested.log

# Use wildcard for hostnames when created suggested signature
# A signature created with a wildcard will match for all hostnames, not just the host in which the anomaly occured
	WildcardSuggestedSignature = no

# Output all alerts in form of a pretty ascii card versus one simple line containing the log
# This affects any 'print' action, whether it is an AnomalyAction or specific to a match signature
	FormCard = no

# Enable mail queueing.  This will prevent email flooding when a large ammount of signatures
# with an action of "mail" are matched, anomalies or otherwise.
	QueueMail = yes

# The number of seconds between mail queue dumps.
	QueueDumpTimeThreshold = 180
